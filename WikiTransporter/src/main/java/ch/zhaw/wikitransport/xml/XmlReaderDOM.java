package ch.zhaw.wikitransport.xml;

import java.io.File;
import java.io.IOError;
import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXParseException;

import ch.zhaw.wikitransport.page.Page;
import ch.zhaw.wikitransport.util.WikiTransporterCfg;

/**
 * That's an helper class to read the XML-file generated by the WikiDoclet
 * 
 * @author Rolf Koch (kochrol@students.zhaw.ch), Christian Dubs (dubschr@students.zhaw.ch)
 *
 */
public class XmlReaderDOM implements XmlReadable<Page> {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(XmlReaderDOM.class.getName());
	private static final String WIKI_DOCLET_XSD = "wikidoclet.xsd";

	private Document doc;
	private int childPageListLen = -1;
	private int currentPageCounter = 0;
	private Element rootElement;
	
	private NodeList pageList;
	private String indexPageIdentifier;
	//private List<Page> tmp = new LinkedList<Page>();
	
	/**
	 * just for debugging.
	 * @param args
	 */
	public static void main(String[] args){
		XmlReaderDOM myReader = new XmlReaderDOM();
		
		System.out.println("INDEX PAGE ATTRIBUTE: " + myReader.getIndexPageIdentifier());
		
		for(Page p : myReader){
			System.out.println("PAGE_TITLE: " + p.getTitleValue()); 
			System.out.println("PAGE_HASH: " + p.getHashValue());
			System.out.println("PAGE_TIME:  " + p.getTimeValue() + "\n");
		}
	}
	
	public static XmlReadable<Page> newDOMXmlReader(){
		return new XmlReaderDOM();
	}
	
	/**
	 * Default constructor
	 */
	private XmlReaderDOM(){
		//makes all initialization steps.
		init();
	}
	
	private void init(){
        
        try {
        	WikiTransporterCfg cfg = WikiTransporterCfg.getInstance();
    		DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
    		docBuilderFactory.setValidating(false);
    		docBuilderFactory.setNamespaceAware(true);
    		
    		//check xml against scheme
    		SchemaFactory schemaFactory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");
    		docBuilderFactory.setSchema(schemaFactory.newSchema(new Source[] { new StreamSource(getClass().getResourceAsStream(WIKI_DOCLET_XSD))}));

    		DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
			docBuilder.setErrorHandler(new XmlReaderErrorHandler());
			
			doc = docBuilder.parse(new File(cfg.getConfigValue(WikiTransporterCfg.CFG_PAR_XML)));
			
			// normalize text representation
            doc.getDocumentElement().normalize();
            
            //That's the root element of the xml --> wikiDocletPage tag
            rootElement = doc.getDocumentElement();
            
            //getting the url of the indexpage
            indexPageIdentifier = rootElement.getAttribute(WikiTransporterCfg.WIKI_DOCLET_INDEX_PAGE_NAME_ATTRIBUTE);
            
            //logging for debugging purposes
            LOGGER.trace("WikiDoclet XML File root element name: " + rootElement.getNodeName());
            
            //That's a list of all child nodes from the root node --> page tag
            pageList = doc.getDocumentElement().getChildNodes();
            
            //Represents the number of page elements in current xml file.
            childPageListLen = pageList.getLength();
            
	        //logging for debugging purposes
	        LOGGER.trace("XML PAGE LIST LENGTH: " + childPageListLen);

		} catch (ParserConfigurationException e) {
			LOGGER.error("XML-Reader parser configuration exception" , e);
		}
		catch (SAXParseException err) {
			LOGGER.error ("** Parsing error" + ", line " + err.getLineNumber () + ", uri " + err.getSystemId ());
			LOGGER.error(" " + err.getMessage ());
			
		}
		catch (IOException e) {
			LOGGER.error("XML Reader IOException" , e);
			throw new IOError(e);
		}
		catch (NullPointerException e){
			LOGGER.error("Path to xml file not found! The error message was: {}", e);
		}
		catch (Throwable t) {
			LOGGER.error("XML Reader has an error" , t);
			throw new Error("XML Reader has an error", t);
		}
	}

	private String getNodeValues(Element pageElement, String tagName, int i) {
		NodeList nodeList;
		Element nodeElement;
		NodeList currentNodeTextNodeList;
		String tmpCurrentNodeValue;
		
		//------- getting value of element of current page element
		nodeList = pageElement.getElementsByTagName(tagName);
		nodeElement = (Element)nodeList.item(0);

		currentNodeTextNodeList = nodeElement.getChildNodes();
		
		tmpCurrentNodeValue = ((Node)currentNodeTextNodeList.item(0)).getNodeValue().trim();
		
		//logging for debugging purposes
		LOGGER.trace("XML DATA: " + nodeElement.getNodeName() + ": chars: " + tmpCurrentNodeValue.length());
		
		//------- end getting value of element
		
		return tmpCurrentNodeValue;
		
	}

	/**
	 * Method to get the index page url identifier.
	 * 
	 * @return indexPageUrl - A String representing indexPageUrl
	 */
	public String getIndexPageIdentifier() {
		return indexPageIdentifier;
	}

	@Override
	public boolean hasNext() {
		return (currentPageCounter < childPageListLen);
	}

	@Override
	public Page next() {
		Node pageNode;
		Element pageElement;
		Page myXMLLine = null;
		
		pageNode = pageList.item(currentPageCounter);
    	
    	//logging for debugging purposes
    	LOGGER.trace("PAGE " + currentPageCounter);
    	
    	if(pageNode.getNodeType() == Node.ELEMENT_NODE && hasNext()){
    		pageElement = (Element)pageNode;
    		myXMLLine = new Page();
    		
    		myXMLLine.setTitleValue(getNodeValues(pageElement, WikiTransporterCfg.WIKI_DOCLET_XML_TITLE, currentPageCounter));
    		myXMLLine.setContentValue(getNodeValues(pageElement, WikiTransporterCfg.WIKI_DOCLET_XML_CONTENT, currentPageCounter));
    		myXMLLine.setHashValue(getNodeValues(pageElement, WikiTransporterCfg.WIKI_DOCLET_XML_HASH, currentPageCounter));
    		myXMLLine.setTimeValue(getNodeValues(pageElement, WikiTransporterCfg.WIKI_DOCLET_XML_TIME, currentPageCounter++));
    		
    	}
    	else{
			throw new NoSuchElementException(
					"There is no such element in the list. Please make sure that you access the iterator in a correct manner within its boundary!");
    	}
    	return myXMLLine;
	}

	@Override
	public void remove() {
		throw new UnsupportedOperationException("This operation is not supported!");
	}

	@Override
	public Iterator<Page> iterator() {
		return this;
	}

	@Override
	public List<Page> getParsedElements() {
		List<Page> currentPagesList = new LinkedList<Page>();
		
		for(Page p : this){
			currentPagesList.add(p);
		}
		
		return currentPagesList;
	}
}